//package com.onlinebookshop.shop.controller;
// 
//import java.util.List;
// 
//import org.springframework.stereotype.Controller;
//import org.springframework.web.bind.annotation.GetMapping;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.ResponseBody;
// 
//import com.onlinebookshop.shop.model.Book;
//import com.onlinebookshop.shop.service.BookService;
// 
//@Controller
//@RequestMapping("/api")
//public class BookController {
//	private BookService bookService;
//	public BookController(BookService bookService) {
//		this.bookService = bookService;
//	}
//	@GetMapping("/books")
//	@ResponseBody
//	public List<Book> fetchBooks(){
//		return bookService.getAllBooks();
//	}
//		@GetMapping
//		public String showBooks() {
//			return "redirect:/books.html";
//		}
//
////fetch book by id
// 
//}


package com.onlinebookshop.shop.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.onlinebookshop.shop.model.Book;
import com.onlinebookshop.shop.service.BookService;

@Controller
@RequestMapping("/api")
public class BookController {

    private final BookService bookService;

    // Constructor-based dependency injection
    public BookController(BookService bookService) {
        this.bookService = bookService;
    }

    // Endpoint to fetch all books
    @GetMapping("/books")
    @ResponseBody
    public List<Book> fetchBooks() {
        return bookService.getAllBooks();
    }

    // Endpoint to redirect to books.html
    @GetMapping
    public String showBooks() {
        return "redirect:/books.html";
    }

    // Endpoint to fetch a book by its ID
    @GetMapping("/books/{id}")
    @ResponseBody
    public ResponseEntity<Book> fetchBookById(@PathVariable int id) {
        Book book = bookService.getBookById(id);
        if (book != null) {
            return ResponseEntity.ok(book);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}





