<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>JavaScript Example</title>
</head>
<body>
<h1 id="heading">Welcome to JavaScript</h1>
<p class="message">Welcome to JavaScript, Welcome to JavaScript, Welcome to JavaScript</p>
<button id="btn">Click Here</button>

<script>
function fetchData() {
    return new Promise((resolve, reject) => {
        console.log("Fetching data...");
        setTimeout(() => {
            const success = true;
            if (success) {
                resolve({name: "Tanuj", age: 25});
            } else {
                reject("Error: Failed to fetch data");
            }
        }, 3000);
    });
}

async function getData() {
    console.log("Fetching info...");
    try {
        const data = await fetchData();
        console.log("Processing data:", data);
        const updatedData = { ...data, city: "ND" };
        console.log("Processing updated data:", updatedData);
    } catch (error) {
        console.log("Error:", error);
    }
}
getData();

async function fetchUserData(userId) {
    try {
        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
        if (!response.ok) {
            throw new Error(`HTTP error: status ${response.status}`);
        }
        const data = await response.json();
        console.log("User Data:", data);
    } catch (error) {
        console.log("Error:", error);
    }
}

function fetchAllUsers() {
    fetch("https://jsonplaceholder.typicode.com/users")
        .then((response) => {
            if (!response.ok) {
                throw new Error(`HTTP error: status ${response.status}`);
            }
            return response.json();
        })
        .then((data) => {
            console.log("Users Data:", data);
        })
        .catch((error) => {
            console.log("Error:", error);
        });
}

async function getUserData(userIds) {
    try {
        const userPromises = userIds.map(async (id) => {
            const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);
            if (!response.ok) {
                throw new Error(`Network response was not ok for user ID ${id}`);
            }
            return response.json();
        });

        const usersData = await Promise.all(userPromises);
        console.log("Users data:", usersData);
    } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
    }
}

async function createUser(user) {
    try {
        const response = await fetch("https://jsonplaceholder.typicode.com/users", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(user)
        });

        if (!response.ok) {
            throw new Error(`HTTP error: status ${response.status}`);
        }

        const data = await response.json();
        console.log("Created User:", data); 
    } catch (error) {
        console.log("Error:", error); 
    }
}

async function deleteUserById(id) {
    const confirmation = window.confirm("Are you sure you want to delete this user?");
    if (!confirmation) {
        console.log("Deletion canceled.");
        return;
    }

    try {
        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`, {
            method: "DELETE"
        });

        if (!response.ok) {
            throw new Error(`HTTP error: status ${response.status}`);
        }

        console.log(`User with id: ${id} deleted.`);
    } catch (error) {
        console.log("Error:", error);
    }
}

// Define the user object
const user = {
    name: "Afroz",
    email: "qwer@123"
};

const userIds = [1, 2, 3, 4, 8]; 
getUserData(userIds);

fetchAllUsers();
fetchUserData(5);
createUser(user);

</script>
</body>
</html>
